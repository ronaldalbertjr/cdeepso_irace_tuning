library(quantmod)
getSymbols("GOOGL", src = "yahoo", from = as.Date("2020-05-01"))
price_history <- as.numeric(GOOGL$GOOGL.Close)
log_return_price_history <- diff(log(price_history))[2:length(price_history) - 1]
sigma <- sd(log_return_price_history)/sqrt(length(price_history))
build_stock_tree <- function(S, sigma, delta_t, N) {
tree = matrix(0, nrow=N+1, ncol=N+1)
U = exp(sigma*sqrt(delta_t))
D = exp(-sigma*sqrt(delta_t))
for (i in 1:(N+1)) {
for (j in 1:i) {
tree[i, j] = S * U^(j-1) * D^((i-1)-(j-1))
}  }
return(tree)
}
firstExample <- build_stock_tree(S=price_history[1], sigma=sigma, delta_t=1, N=20)
firstExample
View(firstExample)
library(quantmod)
getSymbols("GOOGL", src = "yahoo", from = as.Date("2020-05-01"))
price_history <- as.numeric(GOOGL$GOOGL.Close)
plot(price_history)
u = mean(log_return_price_history)
log_return_price_history <- diff(log(price_history))[2:length(price_history) - 1]
u = mean(log_return_price_history)
u
var = var(log_return_price_history)
drift <- u - (0.5 * var)
std = std(log_return_price_history)
std = sqrt(log_return_price_history)
std = sqrt(var)
std
pnorm(0.5)
qnorm(0.5)
pnorm(0)
pnorm(3.7)
exp(2)
matrix(runif(10), nrow=1000)
runif(10)
random <- matrix(runif(iterations), t_intervals)
t_intervals <- 1000
iterations <- 10
random <- matrix(runif(iterations), t_intervals)
View(random)
View(random)
random <- matrix(runif(iterations), nrow=t_intervals)
View(random)
random <- matrix(runif(iterations*t_intervals), nrow=t_intervals)
View(random)
random + 2
daily_returns <- exp(drift + std * random)
View(daily_returns)
View(daily_returns)
c(1, 2, 3)*c(3,4,5)
S0 = price_history[length(price_history)]
S0
A <- 5
A
replicate(10, 5)
future_prices <- matrix(replicate(S0, iterations), nrow=t_intervals)
View(future_prices)
future_prices <- matrix(replicate(S0, iterations*t_intervals), nrow=t_intervals)
View(future_prices)
future_prices <- matrix(replicate(iterations*t_intervals, S0), nrow=t_intervals)
View(future_prices)
future_prices <- matrix(replicate(iterations, S0), nrow=t_intervals)
View(future_prices)
*t_intervals
View(future_prices)
future_prices <- matrix(replicate(iterations*t_intervals, S0), nrow=t_intervals)
View(future_prices)
future_prices[2] <- future_prices[1] * daily_returns[2]
View(daily_returns)
View(future_prices)
future_prices[1] * daily_returns[2]
future_prices[1,:] * daily_returns[2]
future_prices[1,:]
future_prices[1,]
daily_returns[2,]
future_prices[1,] * daily_returns[2,]
future_prices[2,] = future_prices[1,] * daily_returns[2,]
for (i in 2:t_intervals) {
future_prices[i,] = future_prices[i - 1,]*daily_returns[i,]
}
plot(future_prices, type='l')
df <- data.frame(future_prices)
View(df)
plot(df, type='l')
plot(x=1:t_intervals, df, type='l')
plot(x=1:t_intervals-1, df, type='l')
plot(x=1:10, df, type='l')
plot(x=1:nrow(df), df, type='l')
df.plot()
library(ggplot2)
ggplot2(df)
ggplot2(df) + geom_point()
ggplot(df) + geom_line()
df[,1]
plot(1:t_intervals, df[,1], type = 'l', col=1)
for (i in 2:iterations) {
lines(1:t_intervals, df[,i], type = 'l', col=2)
}
getSymbols("WEGE3.SA", src = "yahoo", from = as.Date("2007-05-01"))
price_history <- as.numeric(WEGE3.SA$WEGE3.SA.Close)
log_return_price_history <- diff(log(price_history))[2:length(price_history) - 1]
u <- mean(log_return_price_history)
var <- var(log_return_price_history)
drift <- u - (0.5 * var)
std <- sqrt(var)
t_intervals <- 1000
iterations <- 10
random <- matrix(runif(iterations*t_intervals), nrow=t_intervals)
daily_returns <- exp(drift + std * random)
S0 = price_history[length(price_history)]
future_prices <- matrix(replicate(iterations*t_intervals, S0), nrow=t_intervals)
for (i in 2:t_intervals) {
future_prices[i,] = future_prices[i - 1,]*daily_returns[i,]
}
df <- data.frame(future_prices)
plot(1:t_intervals, df[,1], type = 'l', col=1)
for (i in 2:iterations) {
lines(1:t_intervals, df[,i], type = 'l', col=2)
}
qnorm(0.5)
qnorm([0.5, 0.2])
qnorm(c(0.5, 0.2)
)
runif(iterations*t_intervals)
getSymbols("WEGE3.SA", src = "yahoo", from = as.Date("2007-05-01"))
price_history <- as.numeric(WEGE3.SA$WEGE3.SA.Close)
log_return_price_history <- diff(log(price_history))[2:length(price_history) - 1]
u <- mean(log_return_price_history)
var <- var(log_return_price_history)
drift <- u - (0.5 * var)
std <- sqrt(var)
t_intervals <- 1000
iterations <- 10
random <- matrix(qnorm(runif(iterations*t_intervals)), nrow=t_intervals)
daily_returns <- exp(drift + std * random)
S0 = price_history[length(price_history)]
future_prices <- matrix(replicate(iterations*t_intervals, S0), nrow=t_intervals)
for (i in 2:t_intervals) {
future_prices[i,] = future_prices[i - 1,]*daily_returns[i,]
}
df <- data.frame(future_prices)
plot(1:t_intervals, df[,1], type = 'l', col=1)
for (i in 2:iterations) {
lines(1:t_intervals, df[,i], type = 'l', col=2)
}
plot(1:t_intervals, df[,1], type = 'l', col=1)
for (i in 2:iterations) {
lines(1:t_intervals, df[,i], type = 'l', col=i)
}
setwd('/home/ronald/Documents/scripts/irace_benchmark/tuning')
library('irace')
scenario <- readScenario(filename = 'scenario.txt', scenario = defaultScenario())
checkIraceScenario(scenario = scenario)
irace.main(scenario = scenario)
setwd('/home/ronald/Documents/scripts/irace_benchmark/tuning')
library('irace')
scenario <- readScenario(filename = 'scenario.txt', scenario = defaultScenario())
checkIraceScenario(scenario = scenario)
quit()
